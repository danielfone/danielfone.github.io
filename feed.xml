<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Daniel Fone</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Bootstrap -->
    <link href="/stylesheets/application.css" media="screen" rel="stylesheet" type="text/css" />

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
    <![endif]-->
  </head>
  <body>
    <div class="container">
        <header>
    <img width="100" style="float: left; margin-right: 1em" src="/images/blue-dot.png" />
    <h1><a href="/">Daniel Fone</a></h1>
    <p class="lead">Ruby on Rails Engineer</p>
  </header>

  <div class="row">
    <div class="col-md-9">
      <?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/blog</id>
  <link href="http://blog.url.com/blog"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-10-19T01:29:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Prototyping Web Applications in Rails 4</title>
    <link rel="alternate" href="http://blog.url.com/blog/2013/10/19/prototyping-web-applications-in-rails-4/"/>
    <id>http://blog.url.com/blog/2013/10/19/prototyping-web-applications-in-rails-4/</id>
    <published>2013-10-19T01:29:00Z</published>
    <updated>2013-10-22T09:19:52+13:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;From a presentation I gave at the at the &lt;a href="https://twitter.com/chchruby"&gt;@chchruby&lt;/a&gt; meetup on Thursday, 17th Oct, 2013.
It was aimed at folks who were unfamiliar with Rails and bear in mind, this was a &lt;strong&gt;15 minute&lt;/strong&gt; lightning talk.
I've linked to specific commits below, but you can view the finished repo on &lt;a href="https://github.com/danielfone/reimburser-wizard"&gt;GitHub&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id="background"&gt;Background&lt;/h2&gt;

&lt;p&gt;Tonight I want share a development style that Rails is very good at,
but one that doesn't get a lot of love in the community.&lt;/p&gt;

&lt;p&gt;When I first discovered Ruby on Rails in my days of writing spaghetti PHP,
I was amazed with how fast you could write basic web applications.
However, as we become better developers and learn how to do things &lt;em&gt;properly&lt;/em&gt;,
we spend more and more time thinking about testing and decoupling and encapsulation and what to name our variables.
In other words: no matter how good your tools are, doing things &lt;em&gt;well&lt;/em&gt; is hard and takes time.&lt;/p&gt;

&lt;p&gt;So tonight I want to go back to the good old days of not knowing any better,
and show you how little effort it takes to throw together a prototype web application using generators and scaffolds and lots of bad hacks.&lt;/p&gt;

&lt;p&gt;And although I'd never want to see this kind of code in a production application,
I'm increasingly using this technique professionally
to develop very fast, cost-effective prototypes for demonstration purposes.
After all, it's much easier discussing the merit of an idea when everyone's looking at it on the screen,
rather than everyone imagining something slightly different in their head.&lt;/p&gt;

&lt;h2 id="the-idea"&gt;The Idea&lt;/h2&gt;

&lt;p&gt;We're going to prototype a simple reimbursement system.
We want to manage expense claims which consist of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A simple reference&lt;/li&gt;
  &lt;li&gt;A "payee" to reimburse â€” usually an employee&lt;/li&gt;
  &lt;li&gt;A series of lines detailing the expenses, amount, expense codes etc&lt;/li&gt;
  &lt;li&gt;Any comments&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="the-application-skeleton"&gt;The Application Skeleton&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ rails new reimburser-wizard -T -m ~/Development/rails-templates/default-prototype.rb
$ cd reimburser-wizard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;rails new&lt;/code&gt; command is pretty self-explanatory. It creates a new Rails application in a directory of the same name.
The only two options I'm specifying are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-T, [--skip-test-unit]         # Skip Test::Unit files
-m, [--template=TEMPLATE]      # Path to some application template (can be a filesystem path or URL)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can check out my &lt;a href="https://github.com/danielfone/rails-templates/blob/master/default-prototype.rb"&gt;prototyping template on Github&lt;/a&gt;,
but here's the basic rundown:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Disable test generators&lt;/li&gt;
  &lt;li&gt;Disable strong parameter protection&lt;/li&gt;
  &lt;li&gt;Include the &lt;a href="https://github.com/seyhunak/twitter-bootstrap-rails"&gt;twittter-bootstrap-rails gem&lt;/a&gt; and run the generators&lt;/li&gt;
  &lt;li&gt;Remove production and test configuration&lt;/li&gt;
  &lt;li&gt;Add a partial for rendering error messages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we'll copy in a simple layout (&lt;a href="https://github.com/danielfone/reimburser-wizard/blob/fd4055e12704b800b7246d637209b5ea5e44005a/app/views/layouts/application.html.erb"&gt;app/views/layouts/application.html.erb&lt;/a&gt;)
and some bootstrap overrides (&lt;a href="https://github.com/danielfone/reimburser-wizard/blob/fd4055e12704b800b7246d637209b5ea5e44005a/app/assets/stylesheets/bootstrap_and_overrides.css"&gt;app/assets/stylesheets/bootstrap_and_overrides.css&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id="the-scaffolding"&gt;The Scaffolding&lt;/h2&gt;

&lt;p&gt;Here's where we really start building our prototype. Most of the work is done by Rails' scaffold generators.
In this simple prototype, we'll model our domain with just two resources, a Reimbursement and an Employee.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails generate scaffold Reimbursement reference:string payee:references comments:text data:text
$ rails generate scaffold Employee name:string
$ rake db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our Reimbursement model is very simple: we've got three regular attributes (&lt;code&gt;reference&lt;/code&gt;, &lt;code&gt;payee&lt;/code&gt; and &lt;code&gt;comments&lt;/code&gt;),
and a &lt;code&gt;data&lt;/code&gt; field we'll use as a  meta-attribute for serializing whatever other attributes we need later.
For the purposes of the demo, our Employee simply has a &lt;code&gt;name&lt;/code&gt; attribute.
The &lt;code&gt;db:migrate&lt;/code&gt; rake task applies the &lt;a href="https://github.com/danielfone/reimburser-wizard/tree/2c3fe4770203d66e25c41482deb78c19491062c8/db/migrate"&gt;generated migrations&lt;/a&gt; to the sqlite database.
As you can see in the &lt;a href="https://github.com/danielfone/reimburser-wizard/commit/2c3fe4770203d66e25c41482deb78c19491062c8"&gt;commit&lt;/a&gt;, the scaffold generators create a lot of code for us.&lt;/p&gt;

&lt;p&gt;Now we'll run some bootstrap helpers to replace the default rails views with &lt;a href="https://github.com/danielfone/reimburser-wizard/commit/f4cd02940a06b1cf1972a71a557f11612b61db39"&gt;bootstrap themed views&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm app/assets/stylesheets/scaffolds.css.scss
$ rails generate bootstrap:themed Reimbursements
$ rails generate bootstrap:themed Employees
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's it for our scaffolding! The basic foundation of the prototype is in place.&lt;/p&gt;

&lt;h2 id="demo"&gt;Demo&lt;/h2&gt;

&lt;p&gt;Now's an excellent time to play with the application. Let's start the web server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because we haven't set up our &lt;a href="http://api.rubyonrails.org/v4.0.0/classes/ActionDispatch/Routing/Mapper/Base.html#method-i-root"&gt;root route&lt;/a&gt;,
you'll need to navigate to http://localhost:3000/reimbursements .&lt;/p&gt;

&lt;p&gt;We've barely written any code but we've got a fully functional web application.
Admittedly it's not very useful yet, but it's a powerful base to add functionality on to our prototype.
Be sure to create a few &lt;code&gt;Employees&lt;/code&gt; for our next step.&lt;/p&gt;

&lt;h2 id="making-it-work"&gt;Making It Work&lt;/h2&gt;

&lt;p&gt;From this point, we'll write code rather than use generators. I'll link to diffs on GitHub.
If you're new to Ruby on Rails, check out any unfamiliar methods in the &lt;a href="http://api.rubyonrails.org/v4.0.0/"&gt;Ruby on Rails API docs&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="change-payee-field-to-a-select-boxpayee-commit"&gt;&lt;a href="https://github.com/danielfone/reimburser-wizard/commit/5a512719d522f4cf063632dfd1b6a18875db67aa"&gt;Change payee field to a select box&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Naturally, we want our users to be able to select employees to reimburse.
We'll use Rails' &lt;a href="http://api.rubyonrails.org/v4.0.0/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select"&gt;collection_select&lt;/a&gt; helper for this.
Check out the comments on the commit for more info.&lt;/p&gt;

&lt;h3 id="change-comment-field-to-be-multilinecomment-commit"&gt;&lt;a href="https://github.com/danielfone/reimburser-wizard/commit/f82821e4737a76964ba0b507f6596b381e60a77a"&gt;Change comment field to be multiline&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A simple switch from a text_field to a text_area.
&lt;strong&gt;Confession&lt;/strong&gt;: after 5 years of professional Rails development,
I didn't know about &lt;a href="http://api.rubyonrails.org/v4.0.0/classes/ActionView/Helpers/TextHelper.html#method-i-simple_format"&gt;simple_format&lt;/a&gt; until I was preparing this talk.&lt;/p&gt;

&lt;h3 id="add-lineitem-table-to-reimbursement-viewli-table-commit"&gt;&lt;a href="https://github.com/danielfone/reimburser-wizard/commit/5e52fbc16f4e8609948ae214f47d82a1c6767cfd"&gt;Add LineItem table to Reimbursement view&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The line items are the most complex part of this simple app.
We'll start by adding a table on the Reimbursement view to present the line items.
Since they don't exist yet, we'll "stub" the method on the Reimbursement model to return an empty array.&lt;/p&gt;

&lt;h3 id="add-lineitem-fields-to-reimbursement-formli-form-commit"&gt;&lt;a href="https://github.com/danielfone/reimburser-wizard/commit/257d3f26b95881d384300fc18f6e9645a24d8432"&gt;Add LineItem fields to Reimbursement form&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;To create the line item fields on the reimbursement form, we'll use the magic of &lt;code&gt;fields_for&lt;/code&gt;.
This is a tremendously flexible helper, to the point that I've never quite understood how it works
despite using it in almost every application I write.&lt;/p&gt;

&lt;p&gt;We'll also setup our LineItem model, with a few attributes and some validations.&lt;/p&gt;

&lt;h3 id="allow-lineitems-to-be-persistedli-persist-commit"&gt;&lt;a href="https://github.com/danielfone/reimburser-wizard/commit/1ed5f8176087a1ca72917531792fc744f10f14bb"&gt;Allow LineItems to be persisted&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Finally, we'll inform our Reimbursement model how to persist the line items.
We're going to serialise the attributes as JSON in our data meta-attibute.
We need to do a &lt;a href="https://github.com/danielfone/reimburser-wizard/commit/1ed5f8176087a1ca72917531792fc744f10f14bb#diff-8153fe000751175f2ebf75b5659aa017R17"&gt;simple transformation&lt;/a&gt; on the form data,
but the rest is fairly straight forward.&lt;/p&gt;

&lt;h2 id="finished"&gt;Finished!&lt;/h2&gt;

&lt;p&gt;In just 15 minutes, we've built a very simple prototype that contains some non-trivial functionality.&lt;/p&gt;

&lt;p&gt;{% img /images/2013-10-19-prototyping-web-applications-in-rails-4/form.png %}&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Why You Should Never Rescue Exception in Ruby</title>
    <link rel="alternate" href="http://blog.url.com/blog/2013/05/28/why-you-should-never-rescue-exception-in-ruby/"/>
    <id>http://blog.url.com/blog/2013/05/28/why-you-should-never-rescue-exception-in-ruby/</id>
    <published>2013-05-27T16:27:00Z</published>
    <updated>2013-05-28T04:30:26+12:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;rescue Exception =&amp;gt; e&lt;/code&gt; will turn your code into a brain eating zombie.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The equivalent of &lt;code&gt;rescue&lt;/code&gt; with an argument is &lt;code&gt;rescue =&amp;gt; e&lt;/code&gt; or &lt;code&gt;rescue StandardError =&amp;gt; e&lt;/code&gt;. Use these, or better still, figure out exactly what you're trying to rescue and use &lt;code&gt;rescue OneError, AnotherError =&amp;gt; e&lt;/code&gt;&lt;/p&gt;

&lt;h2 id="whats-the-deal"&gt;What's the deal?&lt;/h2&gt;

&lt;p&gt;A common pattern for rescuing exceptions in Ruby is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
def do_some_job!
  # ... do something ...
  job_succeeded
rescue
  job_failed
end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is &lt;em&gt;okay&lt;/em&gt;, but when developers need to know the exception details, a horrible, &lt;em&gt;nasty&lt;/em&gt;, &lt;strong&gt;brain-devouring&lt;/strong&gt; pattern tends to emerge:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
def do_some_job!
  # ... do something ...
  job_succeeded
rescue Exception =&amp;gt; e
  job_failed e
end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I have been caught out by that code on at least three separate occasions. Twice when I wrote it. I write this post in the hope that I (and perhaps others) will finally wise up about exception handling and that my fingers will never, ever type that code again.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Just to confirm this is a actually bad practice, here's &lt;a href="https://github.com/search?l=ruby&amp;amp;amp;o=asc&amp;amp;amp;p=1&amp;amp;amp;q=%22rescue+Exception+=%3E+%22&amp;amp;amp;ref=searchresults&amp;amp;amp;type=Code"&gt;~200k results&lt;/a&gt; for &lt;code&gt;rescue Exception =&amp;gt; &lt;/code&gt; on Github)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id="what-is-this-i-dont-even"&gt;What is this I don't evenâ€¦&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Exception&lt;/code&gt; is the root of the exception class hierarchy in Ruby. Everything from signal handling to memory errors will raise a subclass of Exception. Here's the full list of exceptions from ruby-core that we'll inadvertently rescue when rescuing Exception.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
SystemStackError
NoMemoryError
SecurityError
ScriptError
  NotImplementedError
  LoadError
    Gem::LoadError
  SyntaxError
SignalException
  Interrupt
SystemExit
  Gem::SystemExitException
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Do you really want to rescue a &lt;code&gt;NoMemoryError&lt;/code&gt; and send an email saying the job failed?!? Good luck with that.&lt;/p&gt;

&lt;h2 id="better-rescue-standarderror"&gt;Better: Rescue StandardError&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;rescue =&amp;gt; e&lt;/code&gt; is shorthand for &lt;code&gt;rescue StandardError =&amp;gt; e&lt;/code&gt; and is almost certainly the broadest type of Exception that we want to rescue. In almost every circumstance, we can replace &lt;code&gt;rescue Exception =&amp;gt; e&lt;/code&gt; with &lt;code&gt;rescue =&amp;gt; e&lt;/code&gt; and be better off for it. The only time when that's &lt;em&gt;not&lt;/em&gt; a good idea is for code that's doing some kind of exception logging/reporting/management. In those rare cases, it's possible we'll want to rescue non-StandardErrors â€” but we still need to think pretty hard about what happens after we've rescued them.&lt;/p&gt;

&lt;p&gt;Most of the time though, we don't even want to rescue StandardError!&lt;/p&gt;

&lt;h2 id="more-self-inflicted-fail"&gt;More Self-Inflicted Fail&lt;/h2&gt;

&lt;p&gt;Imagine a scenario where we're connecting to a 3rd-party API in our application. For example, we want our users to upload their cat photos to twitfaceagram. We definitely want to handle the scenarios where the connection times out, or the DNS fails to resolve, or the API returns bogus data. In these circumstances, we want to present a friendly message to the user that the application couldn't connect to the remote server.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
def upload_to_twitfaceagram
  # ... do something ...
rescue =&amp;gt; e
  flash[:error] = "The internet broke"
end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Most of the time, this code will do what we expect. Something out of our control will go wrong, and it's appropriate to present the user with a friendly message. However, there's a major gotcha with this code: we're still rescuing many exceptions we're not aware of.&lt;/p&gt;

&lt;p&gt;Here's an abridged list of StandardErrors defined in ruby-core 2.0.0 (1.9 is not materially different):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
StandardError
  FiberError
  ThreadError
  IndexError
    StopIteration
    KeyError
  Math::DomainError
  LocalJumpError
  IOError
    EOFError
  EncodingError
    Encoding::ConverterNotFoundError
    Encoding::InvalidByteSequenceError
    Encoding::UndefinedConversionError
    Encoding::CompatibilityError
  RegexpError
  SystemCallError
    Errno::ERPCMISMATCH
    # ... lots of system call errors ...
    Errno::NOERROR # errrr.... what?
  RangeError
    FloatDomainError
  ZeroDivisionError
  RuntimeError
    Gem::Exception
      # ... lots of gem errors ...
  NameError
    NoMethodError
  ArgumentError
    Gem::Requirement::BadRequirementError
  TypeError
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In a fresh Rails 3.2.13 application, there are &lt;strong&gt;&lt;a href="https://gist.github.com/danielfone/5654600"&gt;375 StandardErrors defined&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now let's say we're refactoring the API integration and we make a typo with a method name. What's going to happen?&lt;/p&gt;

&lt;p&gt;If we've wrapped the entire process in a &lt;code&gt;rescue =&amp;gt; e&lt;/code&gt; (which is rescuing StandardError) the NoMethodError is going to be swallowed and our graceful error handling code is going to be run instead. When we run our well written tests, they'll fail. But rather than raising a straight-forward NoMethodError, it'll look like there was an gracefully handled connectivity problem.&lt;/p&gt;

&lt;p&gt;Now &lt;em&gt;that&lt;/em&gt; is going to take some debugging.&lt;/p&gt;

&lt;p&gt;If our tests are poorly written there'll be no exception and perhaps the tests will just pass. Granted, in production our users won't be seeing ugly 500 errors, but they sure won't be uploading their cat photos either.&lt;/p&gt;

&lt;h2 id="best-rescue-specific-exceptions"&gt;Best: Rescue Specific Exceptions&lt;/h2&gt;

&lt;p&gt;Every part of our code is &lt;em&gt;qualified&lt;/em&gt; to rescue from certain exceptional circumstances. If we want to catch connectivity problems in an API integration, our code will be qualified to rescue from a &lt;a href="http://tammersaleh.com/posts/rescuing-net-http-exceptions"&gt;long list&lt;/a&gt; of Net related exceptions. It is &lt;em&gt;not&lt;/em&gt; qualified to rescue from an ArgumentError, which is a code-time problem and not a run-time problem!&lt;/p&gt;

&lt;p&gt;Every time we write a rescue, we need to think hard about what exceptions this code is actually qualified to handle.&lt;/p&gt;

&lt;p&gt;In the case of HTTP, we can make it easier on ourselves and use a wrapper like &lt;a href="https://github.com/lostisland/faraday"&gt;faraday&lt;/a&gt;. In this case we'll have a &lt;a href="https://github.com/lostisland/faraday/blob/master/lib/faraday/error.rb"&gt;much shorter list&lt;/a&gt; of possible exceptions to rescue.&lt;/p&gt;

&lt;h2 id="so"&gt;Soâ€¦&lt;/h2&gt;

&lt;p&gt;â€¦ if you encounter &lt;code&gt;rescue Exception =&amp;gt; e&lt;/code&gt; in an existing codebase, you can almost certainly replace it with &lt;code&gt;rescue =&amp;gt; e&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;â€¦ if you find yourself about to type &lt;code&gt;rescue Exception =&amp;gt; e&lt;/code&gt;, slap yourself in the face, figure out exactly what exceptions you're dealing with and rescue those instead. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Generating a Class Hierarchy in Ruby</title>
    <link rel="alternate" href="http://blog.url.com/blog/2013/05/27/generating-a-class-hierarchy-in-ruby/"/>
    <id>http://blog.url.com/blog/2013/05/27/generating-a-class-hierarchy-in-ruby/</id>
    <published>2013-05-27T00:59:00Z</published>
    <updated>2013-05-27T13:22:08+12:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Here's a way to see what classes descend from a particular superclass in Ruby. You can use it to list all ActiveRecord models defined in your application, every implementation on a particular base class, or whatever else might be of interest.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
&amp;gt; puts ClassHierarchy.new ActionController::Base
ActionController::Base
  ApplicationController
    UsersController
    UserSessionsController
    OrdersController
    ...
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you're using Rails, bear in mind that most of your classes won't be loaded by default in the development environment. You can get around this by manually requiring the files you're interested in:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Dir.glob File.join(Rails.root, 'app/models/**/*.rb'), &amp;amp;method(:require)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To use in your code, simply put &lt;code&gt;class_hierarchy.rb&lt;/code&gt; somewhere that makes sense (perhaps /lib) and &lt;code&gt;require 'class_hierarchy'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;{% gist 5654633 class_hierarchy.rb %}&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Meeting Inspiration Halfway</title>
    <link rel="alternate" href="http://blog.url.com/blog/2013/05/27/meeting-inspiration-halfway/"/>
    <id>http://blog.url.com/blog/2013/05/27/meeting-inspiration-halfway/</id>
    <published>2013-05-27T00:43:00Z</published>
    <updated>2014-01-13T20:23:43+13:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;[Inspiration] does not always respond to the first invitation.
We must always work, and a self-respecting artist must not fold his hands on the pretext that he is not in the mood.
If we wait for the mood, without endeavouring to meet it half-way, we easily become indolent and apathetic.
We must be patient, and believe that inspiration will come to those who can master their disinclination.&lt;/p&gt;

  &lt;p&gt;â€” Pyotr Ilyich Tchaikovsky&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sometimes as a freelancer, it can be very hard to remain productive without work from clients.
When I'm busy engaged with clients, I have dozens of ideas about open source projects, business development, SaaS applications etc.
But when I finally get a gap between engagements, it can be hard to turn those ideas into actionable points.
I know I've hit the bottom of the motivation stack when I'm clicking through meme gifs on the frontpage of reddit.&lt;/p&gt;

&lt;p&gt;As an engineer, I do my best work when I have a concrete problem in front of me that needs a solution in a hurry.
Without that focussing effect, I find myself waiting for bursts of inspiration to fill my sails.&lt;/p&gt;

&lt;p&gt;The antidote? &lt;em&gt;"Believe that inspiration will come to those who can master their disinclination."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Or, to hear it another wayâ€¦&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We just have to come in every morning and somehow, launch the editor.&lt;/p&gt;

  &lt;p&gt;â€” &lt;a href="http://www.joelonsoftware.com/articles/fog0000000339.html"&gt;Joel Spolsky&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>Persist Invalid Records with ActiveRecord</title>
    <link rel="alternate" href="http://blog.url.com/blog/2013/05/24/persist-invalid-records-with-activerecord/"/>
    <id>http://blog.url.com/blog/2013/05/24/persist-invalid-records-with-activerecord/</id>
    <published>2013-05-24T00:38:00Z</published>
    <updated>2013-05-24T14:11:03+12:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Some time ago, I had an unusual design brief for a Rails app:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Even if a user submits an invalid record, we need to
  (a) save a copy to the database, along with the validation errors, and
  (b) re-render the form with the error messages as per the default Rails behavior.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The idea behind this design was that administrators could see the unsuccessful submissions and intervene to assist the users if necessary.&lt;/p&gt;

&lt;p&gt;If anyone ever finds themselves in a similar situation, here's what I ended up doing:&lt;/p&gt;

&lt;p&gt;I'm going to use a model called Subscription by way of example. This same pattern will work on any ActiveRecord model.&lt;/p&gt;

&lt;h3 id="add-a-recorderrors-text-column"&gt;Add a &lt;code&gt;record_errors&lt;/code&gt; text column&lt;/h3&gt;

&lt;p&gt;We'll serialize the validation errors and store them in a field called &lt;code&gt;record_errors&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;{% codeblock /db/migrations/20130524012635_add_record_errors_to_subscriptions.rb %}
class AddRecordErrorsToSubscriptions &amp;lt; ActiveRecord::Migration
  def change
    add_column :subscriptions, :record_errors, :text
  end
end
{% endcodeblock %}&lt;/p&gt;

&lt;h3 id="add-an-activerecord-extension-to-handle-persistence"&gt;Add an ActiveRecord extension to handle persistence&lt;/h3&gt;

&lt;p&gt;This module will catch validation failures and persist the record anyway. It's completely independent of the domain/business logic of the application so I like to store it in /lib. This is the main logic for achieving our required behaviour.&lt;/p&gt;

&lt;p&gt;{% codeblock /lib/save_with_errors.rb %}
require 'active_record'
require 'active_support'&lt;/p&gt;

&lt;p&gt;module SaveWithErrors&lt;/p&gt;

&lt;p&gt;def save_with_errors!(*args)
    save_without_errors! *args
  rescue ActiveRecord::RecordInvalid
    save_anyway
    raise # this re-raises the exception we just rescued
  end&lt;/p&gt;

&lt;p&gt;def save_with_errors(*args)
    save_without_errors *args or save_anyway
  end&lt;/p&gt;

&lt;p&gt;def self.included(receiver)
    receiver.serialize :record_errors, Hash
    receiver.alias_method_chain :save, :errors
    receiver.alias_method_chain :save!, :errors
  end&lt;/p&gt;

&lt;p&gt;private&lt;/p&gt;

&lt;p&gt;def save_anyway
    dup.tap { |s| s.record_errors = errors.messages }.save(validate: false)
    false
  end&lt;/p&gt;

&lt;p&gt;end
{% endcodeblock %}&lt;/p&gt;

&lt;h3 id="include-our-activerecord-extension-on-our-model"&gt;Include our ActiveRecord extension on our model&lt;/h3&gt;

&lt;p&gt;All we need to do is &lt;code&gt;include&lt;/code&gt; the &lt;code&gt;SaveWithErrors&lt;/code&gt; module into our ActiveRecord model. We could also require 'save_with_errors' in &lt;code&gt;config/application.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;{% codeblock /app/models/subscription.rb %}
require 'save_with_errors'&lt;/p&gt;

&lt;p&gt;class Subscription &amp;lt; ActiveRecord::Base
  include SaveWithErrors&lt;/p&gt;

&lt;p&gt;attr_accessible :email, :name, :token&lt;/p&gt;

&lt;p&gt;validate :valid_token&lt;/p&gt;

&lt;p&gt;private&lt;/p&gt;

&lt;p&gt;def valid_token
    # something meaningful
    errors.add :token, 'is invalid' unless token == '12345'
  end&lt;/p&gt;

&lt;p&gt;end
{% endcodeblock %}&lt;/p&gt;

&lt;h3 id="the-result"&gt;The Result&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Loading development environment (Rails 3.2.13)

&amp;gt; Subscription.create! name: 'My Name', email: 'test@example.com'
  SQL (3.6ms)  INSERT INTO "subscriptions" ("created_at", "email", "name", "record_errors", "token", "updated_at") VALUES (?, ?, ?, ?, ?, ?)  [["created_at", Fri, 24 May 2013 01:55:07 UTC +00:00], ["email", "test@example.com"], ["name", "My Name"], ["record_errors", "--- !omap\n- :token:\n  - is invalid\n"], ["token", nil], ["updated_at", Fri, 24 May 2013 01:55:07 UTC +00:00]]

ActiveRecord::RecordInvalid: Validation failed: Token is invalid
  [... backtrace ...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that a record has been inserted, but the exception that we'd expect from &lt;code&gt;create!&lt;/code&gt; has still been raised. We can verify this by inspecting the last Subscription record:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; y Subscription.last
  Subscription Load (0.3ms)  SELECT "subscriptions".* FROM "subscriptions" ORDER BY "subscriptions"."id" DESC LIMIT 1
--- !ruby/object:Subscription
attributes:
  id: 19
  name: My Name
  email: test@example.com
  token: 
  created_at: 2013-05-24 01:55:07.747035000 Z
  updated_at: 2013-05-24 01:55:07.747035000 Z
  record_errors: !omap
  - :token:
    - is invalid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exactly what we want!&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Autoloading The Wrong Superclass with Rails</title>
    <link rel="alternate" href="http://blog.url.com/blog/2013/05/24/autoloading-the-wrong-superclass-with-rails-autoloading/"/>
    <id>http://blog.url.com/blog/2013/05/24/autoloading-the-wrong-superclass-with-rails-autoloading/</id>
    <published>2013-05-23T22:14:00Z</published>
    <updated>2013-05-28T20:13:37+12:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Autoloading in Ruby on Rails can cause all kinds of grief if you don't watch out. Here's a really quick tip to avoid hours of debugging down the track.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Always use the full class namespace when specifying a superclass inside a module&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
  module MyEngine
    class WidgetController &amp;lt; ApplicationController
      # BAD! ApplicationController is ambiguous
    end
  end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
  module MyEngine
    class WidgetController &amp;lt; MyEngine::ApplicationController
      # Good - inherits from the module specific ApplicationController
    end
  end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby
  module MyEngine
    class WidgetController &amp;lt; ::ApplicationController
      # Good - inherits from the top-level ApplicationController
    end
  end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the first example, the superclass for WidgetController &lt;strong&gt;will depend on which classes are already loaded&lt;/strong&gt;. Ruby will look for the following classes in order:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;MyEngine::ApplicationController&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;::ApplicationController&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The trouble occurs when Rails has already autoloaded &lt;code&gt;::ApplicationController&lt;/code&gt; and not &lt;code&gt;MyEngine::ApplicationController&lt;/code&gt;. In this case, Rails will never need to autoload &lt;code&gt;MyEngine::ApplicationController&lt;/code&gt; because &lt;code&gt;::ApplicationController&lt;/code&gt; already matches the superclass.&lt;/p&gt;

&lt;p&gt;Autoloading can occur in a different order between execution environments. For example, tests could all pass and while production system fails because of the different autoloading behavior.&lt;/p&gt;

&lt;p&gt;The examples below demonstrate how the order of the class definitions affect which superclass is used if the superclass is ambiguous. When written out like this, the behavior is fairly obvious.&lt;/p&gt;

&lt;p&gt;```ruby
class Base
  def initialize
    raise "This is the wrong super class!"
  end
end&lt;/p&gt;

&lt;p&gt;module Widget
  class MyWidget &amp;lt; Base
    # Inherits from ::Base because Widget::Base isn't defined yet
  end
end&lt;/p&gt;

&lt;p&gt;module Widget
  class Base
    def initialize
      puts "Success!"
    end
  end
end&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Widget::MyWidget.new
RuntimeError: This is the wrong super class!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```ruby
class Base
  def initialize
    raise "This is the wrong super class!"
  end
end&lt;/p&gt;

&lt;p&gt;module Widget
  class Base
    def initialize
      puts "Success!"
    end
  end
end&lt;/p&gt;

&lt;p&gt;module Widget
  class MyWidget &amp;lt; Base
    # Inherits from Widget::Base
  end
end&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Widget::MyWidget.new
Success!
&lt;/code&gt;&lt;/pre&gt;

</content>
  </entry>
</feed>

    </div>
    <div class="col-md-3">
      <aside>
        <img width="80" class="img-thumbnail" style="float: right" src="//www.gravatar.com/avatar/5efc2a040a61cb22107bcfcecd58454c.jpg?s=300" />
        <h4>About Me</h4>
        <p>
          I'm a freelance Ruby&nbsp;on&nbsp;Rails engineer,
          based in Christchurch, New&nbsp;Zealand.<br>
        </p>
        <p>
          <a href="/hire" class="button primary">Hire me</a>
        </p>
        <p>
          <a href="/blog/archives" class="button">Posts</a>
        </p>
        <p>
          <a class="button" href="https://github.com/danielfone">Github</a>
        </p>
        <p>
          <a class="button" href="https://twitter.com/danielfone">Twitter</a>
        </p>
      </aside>
    </div>
  </div>

    </div>
  </body>
</html>
