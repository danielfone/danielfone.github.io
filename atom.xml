<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Daniel Fone</title>
  <subtitle>Ruby/Rails Engineer</subtitle>
  <id>http://daniel.fone.net.nz/blog</id>
  <link href="http://daniel.fone.net.nz/blog"/>
  <link href="http://daniel.fone.net.nz/atom.xml" rel="self"/>
  <updated>2014-02-01T00:00:00+13:00</updated>
  <author>
    <name>Daniel Fone</name>
  </author>
  <entry>
    <title>Customising Scaffold Views in Ruby on Rails</title>
    <link rel="alternate" href="http://daniel.fone.net.nz/blog/2014/02/01/customising-scaffold-views-in-ruby-on-rails/"/>
    <id>http://daniel.fone.net.nz/blog/2014/02/01/customising-scaffold-views-in-ruby-on-rails/</id>
    <published>2014-02-01T00:00:00+13:00</published>
    <updated>2014-05-20T13:55:02+12:00</updated>
    <author>
      <name>Daniel Fone</name>
    </author>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;In Rails 3.0 and above, generators don’t just look in the source root for templates,
they also search for templates in other paths. And one of them is lib/templates&lt;/p&gt;

  &lt;p&gt;— &lt;a href="http://guides.rubyonrails.org/generators.html#customizing-your-workflow-by-changing-generators-templates"&gt;RailsGuide on Generators&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This fact makes it very easy for us to change the views that are generated when we run &lt;code&gt;rails generate scaffold [...]&lt;/code&gt;. Let’s say we want to change the scaffold’s form template so that it uses a select box for a &lt;code&gt;belongs_to&lt;/code&gt; relationship.&lt;/p&gt;

&lt;p&gt;&lt;img alt="select box" src="/blog/2014/02/01/customising-scaffold-views-in-ruby-on-rails/select-box.png" /&gt;&lt;/p&gt;

&lt;p&gt;Here are the steps we need to take:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Find the original template&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These live in the lib/rails/generators/erb/scaffold/templates folder of the railties gem. To find the path of the gem, we can run &lt;code&gt;bundle show railties&lt;/code&gt;. Alternatively we can run &lt;code&gt;bundle open railties&lt;/code&gt; and navigate to the _form.html.erb file. Once we’ve found this, we’ll want to copy it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Copy it into our application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As quoted above, generators will search for templates in lib/templates. For this template, we’ll need to copy it into lib/templates/erb/scaffold/_form.erb.html within our application’s root.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Change the template&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At this point, we can make whatever changes we like! By way of illustration, here’s one way to use a select box for a belongs_to relationship.&lt;/p&gt;

&lt;pre class="highlight diff"&gt;&lt;span class="err"&gt;# lib/templates/erb/scaffold/_form.html.erb
&lt;/span&gt;&lt;span class="gh"&gt;@@ -23,7 +23,7 @@
&lt;/span&gt; &amp;lt;% else -%&amp;gt;
   &amp;lt;%- if attribute.reference? -%&amp;gt;
     &amp;lt;%%= f.label :&amp;lt;%= attribute.column_name %&amp;gt; %&amp;gt;&amp;lt;br&amp;gt;
&lt;span class="gd"&gt;-    &amp;lt;%%= f.&amp;lt;%= attribute.field_type %&amp;gt; :&amp;lt;%= attribute.column_name %&amp;gt; %&amp;gt;
&lt;/span&gt;&lt;span class="gi"&gt;+    &amp;lt;%%= f.collection_select :&amp;lt;%= attribute.column_name %&amp;gt;, &amp;lt;%= attribute.name.camelize %&amp;gt;.all, :id, :name, prompt: true  %&amp;gt;
&lt;/span&gt;   &amp;lt;%- else -%&amp;gt;
     &amp;lt;%%= f.label :&amp;lt;%= attribute.name %&amp;gt; %&amp;gt;&amp;lt;br&amp;gt;
     &amp;lt;%%= f.&amp;lt;%= attribute.field_type %&amp;gt; :&amp;lt;%= attribute.name %&amp;gt; %&amp;gt;
&lt;/pre&gt;

&lt;p&gt;I’ve uploaded an &lt;a href="https://github.com/danielfone/rails4-custom-scaffold-test"&gt;example app&lt;/a&gt; to github, where you can see the &lt;a href="https://github.com/danielfone/rails4-custom-scaffold-test/blob/master/lib/templates/erb/scaffold/_form.html.erb"&gt;customised template&lt;/a&gt; in full and also &lt;a href="https://github.com/danielfone/rails4-custom-scaffold-test/blob/master/app/views/smart_users/_form.html.erb"&gt;the view&lt;/a&gt; it generates.&lt;/p&gt;

&lt;p&gt;Now when we run &lt;code&gt;rails generate scaffold user name:string user_type:references&lt;/code&gt;, our form will use a helpful select box instead of an empty text field.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Edit: This question was originally prompted by &lt;a href="http://daniel.fone.net.nz/blog/2013/10/19/prototyping-web-applications-in-rails-4/#comment-1225579568"&gt;a comment&lt;/a&gt; on another post, referencing a &lt;a href="http://stackoverflow.com/questions/21486137/rails-scaffold-references-with-select-input-and-entity-label-with-generators/21496682"&gt;StackOverflow question&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Laziest possible solutions for Stripe's CTF</title>
    <link rel="alternate" href="http://daniel.fone.net.nz/blog/2014/01/31/laziest-possible-solutions-for-stripes-ctf/"/>
    <id>http://daniel.fone.net.nz/blog/2014/01/31/laziest-possible-solutions-for-stripes-ctf/</id>
    <published>2014-01-31T00:00:00+13:00</published>
    <updated>2014-05-20T13:55:02+12:00</updated>
    <author>
      <name>Daniel Fone</name>
    </author>
    <content type="html">&lt;p&gt;A good programmer is a lazy programmer right? Here’s my solutions to Stripe’s latest CTF.
I’m almost embarrassed how stupid some of them are, but at the end of the day, results matter.&lt;/p&gt;

&lt;h3 id="level-0"&gt;Level 0&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/danielfone/stripe-ctf-level0/commit/fef0cfcba371dc29d9f0fd1f7bc0e1c9e1161b38#diff-1"&gt;Converted&lt;/a&gt; &lt;code&gt;array&lt;/code&gt; to &lt;code&gt;set&lt;/code&gt; for fast lookups.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danielfone/stripe-ctf-level0"&gt;https://github.com/danielfone/stripe-ctf-level0&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="level-1"&gt;Level 1&lt;/h3&gt;

&lt;p&gt;Simply move the while loop into a single ruby process and use &lt;code&gt;Digest::SHA1&lt;/code&gt;. Slow, but fast enough to beat the level.
This is the only level I had to write proper code for.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danielfone/stripe-ctf-level1"&gt;https://github.com/danielfone/stripe-ctf-level1&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="level-2"&gt;Level 2&lt;/h3&gt;

&lt;p&gt;Exploit the fact that the test uses a fixed number of requests (and many more for “elephants” than “mice”), and &lt;a href="https://github.com/danielfone/stripe-ctf-level2/commit/7f1171a8400c39ac691c54fa0cddbc9ea4202edb#diff-1"&gt;limit each IP to 10 requests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danielfone/stripe-ctf-level2"&gt;https://github.com/danielfone/stripe-ctf-level2&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="level-3"&gt;Level 3&lt;/h3&gt;

&lt;p&gt;Friends don’t let friends use scala.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set up a basic sinatra server to implement the API&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/danielfone/stripe-ctf-level3/blob/master/search.rb#L24"&gt;Shell out to grep&lt;/a&gt; to do actual searching. Single node, no index. O_o&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/danielfone/stripe-ctf-level3"&gt;https://github.com/danielfone/stripe-ctf-level3&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="level-4"&gt;Level 4&lt;/h3&gt;

&lt;p&gt;I was fortunate enough to reach this level early, and pass it before Stripe improved octopus. As such I passed it with &lt;a href="https://github.com/danielfone/stripe-ctf-level4/commit/10be54c6915d1492791bb147a0c9daeb3c27003d"&gt;my first attempt&lt;/a&gt;, simply by removing the failover (node0 becomes Single Point of Failure) and forwarding requests from the secondaries to the primary.&lt;/p&gt;

&lt;p&gt;The remaining commits are my futile attempts to pass this level after the SPOF check was added to the tests. Looking at the code for successful solutions, I can see I was on the right path but needed to invest more time into making my command forwarding more robust.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danielfone/stripe-ctf-level4"&gt;https://github.com/danielfone/stripe-ctf-level4&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Prototyping Web Applications in Rails 4</title>
    <link rel="alternate" href="http://daniel.fone.net.nz/blog/2013/10/19/prototyping-web-applications-in-rails-4/"/>
    <id>http://daniel.fone.net.nz/blog/2013/10/19/prototyping-web-applications-in-rails-4/</id>
    <published>2013-10-19T00:00:00+13:00</published>
    <updated>2014-05-20T13:55:02+12:00</updated>
    <author>
      <name>Daniel Fone</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;From a presentation I gave at the at the &lt;a href="https://twitter.com/chchruby"&gt;@chchruby&lt;/a&gt; meetup on Thursday, 17th Oct, 2013.
It was aimed at folks who were unfamiliar with Rails and bear in mind, this was a &lt;strong&gt;15 minute&lt;/strong&gt; lightning talk.
I’ve linked to specific commits below, but you can view the finished repo on &lt;a href="https://github.com/danielfone/reimburser-wizard"&gt;GitHub&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id="background"&gt;Background&lt;/h3&gt;

&lt;p&gt;Tonight I want share a development style that Rails is very good at,
but one that doesn’t get a lot of love in the community.&lt;/p&gt;

&lt;p&gt;When I first discovered Ruby on Rails in my days of writing spaghetti PHP,
I was amazed with how fast you could write basic web applications.
However, as we become better developers and learn how to do things &lt;em&gt;properly&lt;/em&gt;,
we spend more and more time thinking about testing and decoupling and encapsulation and what to name our variables.
In other words: no matter how good your tools are, doing things &lt;em&gt;well&lt;/em&gt; is hard and takes time.&lt;/p&gt;

&lt;p&gt;So tonight I want to go back to the good old days of not knowing any better,
and show you how little effort it takes to throw together a prototype web application using generators and scaffolds and lots of bad hacks.&lt;/p&gt;

&lt;p&gt;And although I’d never want to see this kind of code in a production application,
I’m increasingly using this technique professionally
to develop very fast, cost-effective prototypes for demonstration purposes.
After all, it’s much easier discussing the merit of an idea when everyone’s looking at it on the screen,
rather than everyone imagining something slightly different in their head.&lt;/p&gt;

&lt;h3 id="the-idea"&gt;The Idea&lt;/h3&gt;

&lt;p&gt;&lt;img alt="form.png" src="/blog/2013/10/19/prototyping-web-applications-in-rails-4/form.png" /&gt;&lt;/p&gt;

&lt;p&gt;We’re going to prototype a simple reimbursement system.
We want to manage expense claims which consist of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A simple reference&lt;/li&gt;
  &lt;li&gt;A “payee” to reimburse — usually an employee&lt;/li&gt;
  &lt;li&gt;A series of lines detailing the expenses, amount, expense codes etc&lt;/li&gt;
  &lt;li&gt;Any comments&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="the-application-skeleton"&gt;The Application Skeleton&lt;/h3&gt;

&lt;pre class="highlight plaintext"&gt;$ rails new reimburser-wizard -T -m ~/Development/rails-templates/default-prototype.rb
$ cd reimburser-wizard
&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;rails new&lt;/code&gt; command is pretty self-explanatory. It creates a new Rails application in a directory of the same name.
The only two options I’m specifying are:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;-T, [--skip-test-unit]         # Skip Test::Unit files
-m, [--template=TEMPLATE]      # Path to some application template (can be a filesystem path or URL)
&lt;/pre&gt;

&lt;p&gt;You can check out my &lt;a href="https://github.com/danielfone/rails-templates/blob/master/default-prototype.rb"&gt;prototyping template on Github&lt;/a&gt;,
but here’s the basic rundown:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Disable test generators&lt;/li&gt;
  &lt;li&gt;Disable strong parameter protection&lt;/li&gt;
  &lt;li&gt;Include the &lt;a href="https://github.com/seyhunak/twitter-bootstrap-rails"&gt;twittter-bootstrap-rails gem&lt;/a&gt; and run the generators&lt;/li&gt;
  &lt;li&gt;Remove production and test configuration&lt;/li&gt;
  &lt;li&gt;Add a partial for rendering error messages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we’ll copy in a simple layout (&lt;a href="https://github.com/danielfone/reimburser-wizard/blob/fd4055e12704b800b7246d637209b5ea5e44005a/app/views/layouts/application.html.erb"&gt;app/views/layouts/application.html.erb&lt;/a&gt;)
and some bootstrap overrides (&lt;a href="https://github.com/danielfone/reimburser-wizard/blob/fd4055e12704b800b7246d637209b5ea5e44005a/app/assets/stylesheets/bootstrap_and_overrides.css"&gt;app/assets/stylesheets/bootstrap_and_overrides.css&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id="the-scaffolding"&gt;The Scaffolding&lt;/h3&gt;

&lt;p&gt;Here’s where we really start building our prototype. Most of the work is done by Rails’ scaffold generators.
In this simple prototype, we’ll model our domain with just two resources, a Reimbursement and an Employee.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ rails generate scaffold Reimbursement reference:string payee:references comments:text data:text
$ rails generate scaffold Employee name:string
$ rake db:migrate
&lt;/pre&gt;

&lt;p&gt;Our Reimbursement model is very simple: we’ve got three regular attributes (&lt;code&gt;reference&lt;/code&gt;, &lt;code&gt;payee&lt;/code&gt; and &lt;code&gt;comments&lt;/code&gt;),
and a &lt;code&gt;data&lt;/code&gt; field we’ll use as a  meta-attribute for serializing whatever other attributes we need later.
For the purposes of the demo, our Employee simply has a &lt;code&gt;name&lt;/code&gt; attribute.
The &lt;code&gt;db:migrate&lt;/code&gt; rake task applies the &lt;a href="https://github.com/danielfone/reimburser-wizard/tree/2c3fe4770203d66e25c41482deb78c19491062c8/db/migrate"&gt;generated migrations&lt;/a&gt; to the sqlite database.
As you can see in the &lt;a href="https://github.com/danielfone/reimburser-wizard/commit/2c3fe4770203d66e25c41482deb78c19491062c8"&gt;commit&lt;/a&gt;, the scaffold generators create a lot of code for us.&lt;/p&gt;

&lt;p&gt;Now we’ll run some bootstrap helpers to replace the default rails views with &lt;a href="https://github.com/danielfone/reimburser-wizard/commit/f4cd02940a06b1cf1972a71a557f11612b61db39"&gt;bootstrap themed views&lt;/a&gt;.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ rm app/assets/stylesheets/scaffolds.css.scss
$ rails generate bootstrap:themed Reimbursements
$ rails generate bootstrap:themed Employees
&lt;/pre&gt;

&lt;p&gt;That’s it for our scaffolding! The basic foundation of the prototype is in place.&lt;/p&gt;

&lt;h3 id="demo"&gt;Demo&lt;/h3&gt;

&lt;p&gt;Now’s an excellent time to play with the application. Let’s start the web server:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;$ rails server
&lt;/pre&gt;

&lt;p&gt;Because we haven’t set up our &lt;a href="http://api.rubyonrails.org/v4.0.0/classes/ActionDispatch/Routing/Mapper/Base.html#method-i-root"&gt;root route&lt;/a&gt;,
you’ll need to navigate to http://localhost:3000/reimbursements .&lt;/p&gt;

&lt;p&gt;We’ve barely written any code but we’ve got a fully functional web application.
Admittedly it’s not very useful yet, but it’s a powerful base to add functionality on to our prototype.
Be sure to create a few &lt;code&gt;Employees&lt;/code&gt; for our next step.&lt;/p&gt;

&lt;h3 id="making-it-work"&gt;Making It Work&lt;/h3&gt;

&lt;p&gt;From this point, we’ll write code rather than use generators. I’ll link to diffs on GitHub.
If you’re new to Ruby on Rails, check out any unfamiliar methods in the &lt;a href="http://api.rubyonrails.org/v4.0.0/"&gt;Ruby on Rails API docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Change payee field to a select box&lt;/strong&gt; &lt;small&gt;&lt;a href="https://github.com/danielfone/reimburser-wizard/commit/5a512719d522f4cf063632dfd1b6a18875db67aa"&gt;diff&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Naturally, we want our users to be able to select employees to reimburse.
We’ll use Rails’ &lt;a href="http://api.rubyonrails.org/v4.0.0/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select"&gt;collection_select&lt;/a&gt; helper for this.
Check out the comments on the commit for more info.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Change comment field to be multiline&lt;/strong&gt; &lt;small&gt;&lt;a href="https://github.com/danielfone/reimburser-wizard/commit/f82821e4737a76964ba0b507f6596b381e60a77a"&gt;diff&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;A simple switch from a text_field to a text_area.
&lt;strong&gt;Confession&lt;/strong&gt;: after 5 years of professional Rails development,
I didn’t know about &lt;a href="http://api.rubyonrails.org/v4.0.0/classes/ActionView/Helpers/TextHelper.html#method-i-simple_format"&gt;simple_format&lt;/a&gt; until I was preparing this talk.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add LineItem table to Reimbursement view&lt;/strong&gt; &lt;small&gt;&lt;a href="https://github.com/danielfone/reimburser-wizard/commit/5e52fbc16f4e8609948ae214f47d82a1c6767cfd"&gt;diff&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;The line items are the most complex part of this simple app.
We’ll start by adding a table on the Reimbursement view to present the line items.
Since they don’t exist yet, we’ll “stub” the method on the Reimbursement model to return an empty array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add LineItem fields to Reimbursement form&lt;/strong&gt; &lt;small&gt;&lt;a href="https://github.com/danielfone/reimburser-wizard/commit/257d3f26b95881d384300fc18f6e9645a24d8432"&gt;diff&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;To create the line item fields on the reimbursement form, we’ll use the magic of &lt;code&gt;fields_for&lt;/code&gt;.
This is a tremendously flexible helper, to the point that I’ve never quite understood how it works
despite using it in almost every application I write.&lt;/p&gt;

&lt;p&gt;We’ll also setup our LineItem model, with a few attributes and some validations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Allow LineItems to be persisted&lt;/strong&gt; &lt;small&gt;&lt;a href="https://github.com/danielfone/reimburser-wizard/commit/1ed5f8176087a1ca72917531792fc744f10f14bb"&gt;diff&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Finally, we’ll inform our Reimbursement model how to persist the line items.
We’re going to serialise the attributes as JSON in our data meta-attibute.
We need to do a &lt;a href="https://github.com/danielfone/reimburser-wizard/commit/1ed5f8176087a1ca72917531792fc744f10f14bb#diff-8153fe000751175f2ebf75b5659aa017R17"&gt;simple transformation&lt;/a&gt; on the form data,
but the rest is fairly straight forward.&lt;/p&gt;

&lt;h3 id="finished"&gt;Finished!&lt;/h3&gt;

&lt;p&gt;In just 15 minutes, we’ve built a very simple prototype that contains some non-trivial functionality.&lt;/p&gt;

&lt;p&gt;&lt;img alt="form.png" src="/blog/2013/10/19/prototyping-web-applications-in-rails-4/form.png" /&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Why You Should Never Rescue Exception in Ruby</title>
    <link rel="alternate" href="http://daniel.fone.net.nz/blog/2013/05/28/why-you-should-never-rescue-exception-in-ruby/"/>
    <id>http://daniel.fone.net.nz/blog/2013/05/28/why-you-should-never-rescue-exception-in-ruby/</id>
    <published>2013-05-28T00:00:00+12:00</published>
    <updated>2014-05-20T13:55:02+12:00</updated>
    <author>
      <name>Daniel Fone</name>
    </author>
    <content type="html">&lt;h3 id="tldr"&gt;tl;dr&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;rescue Exception =&amp;gt; e&lt;/code&gt; will turn your code into a brain eating zombie.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The equivalent of &lt;code&gt;rescue&lt;/code&gt; with an argument is &lt;code&gt;rescue =&amp;gt; e&lt;/code&gt; or &lt;code&gt;rescue StandardError =&amp;gt; e&lt;/code&gt;. Use these, or better still, figure out exactly what you’re trying to rescue and use &lt;code&gt;rescue OneError, AnotherError =&amp;gt; e&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="whats-the-deal"&gt;What’s the deal?&lt;/h3&gt;

&lt;p&gt;A common pattern for rescuing exceptions in Ruby is:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_some_job!&lt;/span&gt;
  &lt;span class="c1"&gt;# ... do something ...&lt;/span&gt;
  &lt;span class="n"&gt;job_succeeded&lt;/span&gt;
&lt;span class="k"&gt;rescue&lt;/span&gt;
  &lt;span class="n"&gt;job_failed&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;This is fine, but when developers need to capture the exception details, a terrible, &lt;em&gt;terrible&lt;/em&gt; thing happens:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_some_job!&lt;/span&gt;
  &lt;span class="c1"&gt;# ... do something ...&lt;/span&gt;
  &lt;span class="n"&gt;job_succeeded&lt;/span&gt;
&lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
  &lt;span class="n"&gt;job_failed&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;I have been caught out by that code on at least three separate occasions. Twice when I wrote it. I write this post in the hope that I (and perhaps others) will finally wise up about exception handling and that my fingers will never, ever type that code again.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Just to confirm this is a actually bad practice, here’s &lt;a href="https://github.com/search?l=ruby&amp;amp;o=asc&amp;amp;p=1&amp;amp;q=%22rescue+Exception+=%3E+%22&amp;amp;ref=searchresults&amp;amp;type=Code"&gt;~200k results&lt;/a&gt; for &lt;code&gt;rescue Exception =&amp;gt;&lt;/code&gt; on Github&lt;/em&gt;&lt;/p&gt;

&lt;h3 id="what-is-this-i-dont-even"&gt;What is this I don’t even…&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Exception&lt;/code&gt; is the root of the exception class hierarchy in Ruby. Everything from signal handling to memory errors will raise a subclass of Exception. Here’s the full list of exceptions from ruby-core that we’ll inadvertently rescue when rescuing Exception.&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="no"&gt;SystemStackError&lt;/span&gt;
&lt;span class="no"&gt;NoMemoryError&lt;/span&gt;
&lt;span class="no"&gt;SecurityError&lt;/span&gt;
&lt;span class="no"&gt;ScriptError&lt;/span&gt;
  &lt;span class="no"&gt;NotImplementedError&lt;/span&gt;
  &lt;span class="no"&gt;LoadError&lt;/span&gt;
    &lt;span class="no"&gt;Gem&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;LoadError&lt;/span&gt;
  &lt;span class="no"&gt;SyntaxError&lt;/span&gt;
&lt;span class="no"&gt;SignalException&lt;/span&gt;
  &lt;span class="no"&gt;Interrupt&lt;/span&gt;
&lt;span class="no"&gt;SystemExit&lt;/span&gt;
  &lt;span class="no"&gt;Gem&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SystemExitException&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Do you really want to rescue a &lt;code&gt;NoMemoryError&lt;/code&gt; and send an email saying the job failed?!? Good luck with that.&lt;/p&gt;

&lt;h3 id="better-rescue-standarderror"&gt;Better: Rescue StandardError&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rescue =&amp;gt; e&lt;/code&gt; is shorthand for &lt;code&gt;rescue StandardError =&amp;gt; e&lt;/code&gt; and is almost certainly the broadest type of Exception that we want to rescue. In almost every circumstance, we can replace &lt;code&gt;rescue Exception =&amp;gt; e&lt;/code&gt; with &lt;code&gt;rescue =&amp;gt; e&lt;/code&gt; and be better off for it. The only time when that’s &lt;em&gt;not&lt;/em&gt; a good idea is for code that’s doing some kind of exception logging/reporting/management. In those rare cases, it’s possible we’ll want to rescue non-StandardErrors — but we still need to think pretty hard about what happens after we’ve rescued them.&lt;/p&gt;

&lt;p&gt;Most of the time though, we don’t even want to rescue StandardError!&lt;/p&gt;

&lt;h3 id="more-self-inflicted-fail"&gt;More Self-Inflicted Fail&lt;/h3&gt;

&lt;p&gt;Imagine a scenario where we’re connecting to a 3rd-party API in our application. For example, we want our users to upload their cat photos to twitfaceagram. We definitely want to handle the scenarios where the connection times out, or the DNS fails to resolve, or the API returns bogus data. In these circumstances, we want to present a friendly message to the user that the application couldn’t connect to the remote server.&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upload_to_twitfaceagram&lt;/span&gt;
  &lt;span class="c1"&gt;# ... do something ...&lt;/span&gt;
&lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
  &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"The internet broke"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Most of the time, this code will do what we expect. Something out of our control will go wrong, and it’s appropriate to present the user with a friendly message. However, there’s a major gotcha with this code: we’re still rescuing many exceptions we’re not aware of.&lt;/p&gt;

&lt;p&gt;Here’s an abridged list of StandardErrors defined in ruby-core 2.0.0 (1.9 is not materially different):&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="no"&gt;StandardError&lt;/span&gt;
  &lt;span class="no"&gt;FiberError&lt;/span&gt;
  &lt;span class="no"&gt;ThreadError&lt;/span&gt;
  &lt;span class="no"&gt;IndexError&lt;/span&gt;
    &lt;span class="no"&gt;StopIteration&lt;/span&gt;
    &lt;span class="no"&gt;KeyError&lt;/span&gt;
  &lt;span class="no"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DomainError&lt;/span&gt;
  &lt;span class="no"&gt;LocalJumpError&lt;/span&gt;
  &lt;span class="no"&gt;IOError&lt;/span&gt;
    &lt;span class="no"&gt;EOFError&lt;/span&gt;
  &lt;span class="no"&gt;EncodingError&lt;/span&gt;
    &lt;span class="no"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ConverterNotFoundError&lt;/span&gt;
    &lt;span class="no"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvalidByteSequenceError&lt;/span&gt;
    &lt;span class="no"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;UndefinedConversionError&lt;/span&gt;
    &lt;span class="no"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CompatibilityError&lt;/span&gt;
  &lt;span class="no"&gt;RegexpError&lt;/span&gt;
  &lt;span class="no"&gt;SystemCallError&lt;/span&gt;
    &lt;span class="no"&gt;Errno&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ERPCMISMATCH&lt;/span&gt;
    &lt;span class="c1"&gt;# ... lots of system call errors ...&lt;/span&gt;
    &lt;span class="no"&gt;Errno&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;NOERROR&lt;/span&gt; &lt;span class="c1"&gt;# errrr.... what?&lt;/span&gt;
  &lt;span class="no"&gt;RangeError&lt;/span&gt;
    &lt;span class="no"&gt;FloatDomainError&lt;/span&gt;
  &lt;span class="no"&gt;ZeroDivisionError&lt;/span&gt;
  &lt;span class="no"&gt;RuntimeError&lt;/span&gt;
    &lt;span class="no"&gt;Gem&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Exception&lt;/span&gt;
      &lt;span class="c1"&gt;# ... lots of gem errors ...&lt;/span&gt;
  &lt;span class="no"&gt;NameError&lt;/span&gt;
    &lt;span class="no"&gt;NoMethodError&lt;/span&gt;
  &lt;span class="no"&gt;ArgumentError&lt;/span&gt;
    &lt;span class="no"&gt;Gem&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Requirement&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BadRequirementError&lt;/span&gt;
  &lt;span class="no"&gt;TypeError&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;In a fresh Rails 3.2.13 application, there are &lt;strong&gt;&lt;a href="https://gist.github.com/danielfone/5654600"&gt;375 StandardErrors defined&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s say we’re refactoring the API integration and we make a typo with a method name. What’s going to happen?&lt;/p&gt;

&lt;p&gt;If we’ve wrapped the entire process in a &lt;code&gt;rescue =&amp;gt; e&lt;/code&gt; (which is rescuing StandardError) the NoMethodError is going to be swallowed and our graceful error handling code is going to be run instead. When we run our well written tests, they’ll fail. But rather than raising a straight-forward NoMethodError, it’ll look like there was an gracefully handled connectivity problem.&lt;/p&gt;

&lt;p&gt;Now &lt;em&gt;that&lt;/em&gt; is going to take some debugging.&lt;/p&gt;

&lt;p&gt;If our tests are poorly written there’ll be no exception and perhaps the tests will just pass. Granted, in production our users won’t be seeing ugly 500 errors, but they sure won’t be uploading their cat photos either.&lt;/p&gt;

&lt;h3 id="best-rescue-specific-exceptions"&gt;Best: Rescue Specific Exceptions&lt;/h3&gt;

&lt;p&gt;Every part of our code is &lt;em&gt;qualified&lt;/em&gt; to rescue from certain exceptional circumstances. If we want to catch connectivity problems in an API integration, our code will be qualified to rescue from a &lt;a href="http://tammersaleh.com/posts/rescuing-net-http-exceptions"&gt;long list&lt;/a&gt; of Net related exceptions. It is &lt;em&gt;not&lt;/em&gt; qualified to rescue from an ArgumentError, which is a code-time problem and not a run-time problem!&lt;/p&gt;

&lt;p&gt;Every time we write a rescue, we need to think hard about what exceptions this code is actually qualified to handle.&lt;/p&gt;

&lt;p&gt;In the case of HTTP, we can make it easier on ourselves and use a wrapper like &lt;a href="https://github.com/lostisland/faraday"&gt;faraday&lt;/a&gt;. In this case we’ll have a &lt;a href="https://github.com/lostisland/faraday/blob/master/lib/faraday/error.rb"&gt;much shorter list&lt;/a&gt; of possible exceptions to rescue.&lt;/p&gt;

&lt;h3 id="so"&gt;So…&lt;/h3&gt;

&lt;p&gt;… if you encounter &lt;code&gt;rescue Exception =&amp;gt; e&lt;/code&gt; in an existing codebase, you can almost certainly replace it with &lt;code&gt;rescue =&amp;gt; e&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;… if you find yourself about to type &lt;code&gt;rescue Exception =&amp;gt; e&lt;/code&gt;, slap yourself in the face, figure out exactly what exceptions you’re dealing with and rescue those instead.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Generating a Class Hierarchy in Ruby</title>
    <link rel="alternate" href="http://daniel.fone.net.nz/blog/2013/05/27/generating-a-class-hierarchy-in-ruby/"/>
    <id>http://daniel.fone.net.nz/blog/2013/05/27/generating-a-class-hierarchy-in-ruby/</id>
    <published>2013-05-27T00:00:00+12:00</published>
    <updated>2014-05-20T13:55:02+12:00</updated>
    <author>
      <name>Daniel Fone</name>
    </author>
    <content type="html">&lt;p&gt;Here’s a way to see what classes descend from a particular superclass in Ruby. You can use it to list all ActiveRecord models defined in your application, every implementation on a particular base class, or whatever else might be of interest.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&amp;gt; puts ClassHierarchy.new ActionController::Base
ActionController::Base
  ApplicationController
    UsersController
    UserSessionsController
    OrdersController
    ...
&lt;/pre&gt;

&lt;p&gt;If you’re using Rails, bear in mind that most of your classes won’t be loaded by default in the development environment. You can get around this by manually requiring the files you’re interested in:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;Dir.glob File.join(Rails.root, 'app/models/**/*.rb'), &amp;amp;method(:require)
&lt;/pre&gt;

&lt;p&gt;To use in your code, simply put class_hierarchy.rb somewhere that makes sense (perhaps /lib) and &lt;code&gt;require 'class_hierarchy'&lt;/code&gt;.&lt;/p&gt;

&lt;script src="https://gist.github.com/danielfone/5654633.js"&gt;&lt;/script&gt;

</content>
  </entry>
  <entry>
    <title>Meeting Inspiration Halfway</title>
    <link rel="alternate" href="http://daniel.fone.net.nz/blog/2013/05/27/meeting-inspiration-halfway/"/>
    <id>http://daniel.fone.net.nz/blog/2013/05/27/meeting-inspiration-halfway/</id>
    <published>2013-05-27T00:00:00+12:00</published>
    <updated>2014-05-20T13:55:02+12:00</updated>
    <author>
      <name>Daniel Fone</name>
    </author>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;[Inspiration] does not always respond to the first invitation.
We must always work, and a self-respecting artist must not fold his hands on the pretext that he is not in the mood.
If we wait for the mood, without endeavouring to meet it half-way, we easily become indolent and apathetic.
We must be patient, and believe that inspiration will come to those who can master their disinclination.&lt;/p&gt;

  &lt;p&gt;— Pyotr Ilyich Tchaikovsky&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sometimes as a freelancer, it can be very hard to remain productive without work from clients.
When I’m busy engaged with clients, I have dozens of ideas about open source projects, business development, SaaS applications etc.
But when I finally get a gap between engagements, it can be hard to turn those ideas into actionable points.
I know I’ve hit the bottom of the motivation stack when I’m clicking through meme gifs on the frontpage of reddit.&lt;/p&gt;

&lt;p&gt;As an engineer, I do my best work when I have a concrete problem in front of me that needs a solution in a hurry.
Without that focussing effect, I find myself waiting for bursts of inspiration to fill my sails.&lt;/p&gt;

&lt;p&gt;The antidote? &lt;em&gt;“Believe that inspiration will come to those who can master their disinclination.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Or, to hear it another way…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We just have to come in every morning and somehow, launch the editor.&lt;/p&gt;

  &lt;p&gt;— &lt;a href="http://www.joelonsoftware.com/articles/fog0000000339.html"&gt;Joel Spolsky&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
</feed>
