<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Daniel Fone</title>
  <subtitle>Ruby/Rails Engineer</subtitle>
  <id>http://daniel.fone.net.nz/blog</id>
  <link href="http://daniel.fone.net.nz/blog"/>
  <link href="http://daniel.fone.net.nz/atom.xml" rel="self"/>
  <updated>2014-12-03T23:33:00+13:00</updated>
  <author>
    <name>Daniel Fone</name>
  </author>
  <entry>
    <title>Unicode and Regex in Ruby 1.8</title>
    <link rel="alternate" href="http://daniel.fone.net.nz/blog/2014/12/03/unicode-and-regex-in-ruby-1-8/"/>
    <id>http://daniel.fone.net.nz/blog/2014/12/03/unicode-and-regex-in-ruby-1-8/</id>
    <published>2014-12-03T23:33:00+13:00</published>
    <updated>2014-12-04T00:29:53+13:00</updated>
    <author>
      <name>Daniel Fone</name>
    </author>
    <content type="html">&lt;p&gt;For the last 6 months, I have been locked in mortal combat with the worst type of bug ever. It is the kind of bug that demonstrably occurs in production, but it is very intermittent, and you cannot ever reproduce it.&lt;/p&gt;

&lt;p&gt;Finally today, that bug is no more.&lt;/p&gt;

&lt;h4 id="the-problem"&gt;The Problem&lt;/h4&gt;

&lt;p&gt;Users of this particular app can submit comments on ‘tasks’. Comments can contain mentions of other users with a &lt;code&gt;@user&lt;/code&gt; syntax, much like Github. This notifies the mentioned user(s) of the comment.&lt;/p&gt;

&lt;p&gt;Although it had been working fine, it started intermittently failing — less than 1% of the time. Although it wasn’t frequent, it was incredibly unhelpful because commenters wouldn’t know that their message hadn’t been sent, and would blindly wait for some response.&lt;/p&gt;

&lt;h4 id="failing-to-diagnose"&gt;Failing to Diagnose&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The regex that matched metions was &lt;code&gt;/(?:^|\W)@(\w+)/&lt;/code&gt;, which worked fine in every test case we had.&lt;/li&gt;
  &lt;li&gt;Even when I had examples of failing comments, I could copy them out of the database, run them through the parser, and they would correctly send all the notifications.&lt;/li&gt;
  &lt;li&gt;I could &lt;em&gt;not&lt;/em&gt; see why the mentions weren’t getting parsed, and I couldn’t reproduce the errors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="breakthrough"&gt;Breakthrough&lt;/h4&gt;

&lt;p&gt;The relevant parts of the process for these mentions were as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Take a (potentially HTML) comment&lt;/li&gt;
  &lt;li&gt;Convert it to plain text&lt;/li&gt;
  &lt;li&gt;Parse it for mentions and send notifications&lt;/li&gt;
  &lt;li&gt;Save it to the database&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After countless hours of debugging, I discovered the gotcha was in step 2. The HTML to text conversion would (among other things) take HTML entities and convert them to their unicode equivalents. This wasn’t a problem &lt;em&gt;unless&lt;/em&gt; the entity happened to be an &lt;code&gt;&amp;amp;nbsp;&lt;/code&gt; which would sometimes randomly appear in front of @mentions. This would then be converted to a unicode ‘NO-BREAK SPACE’ (U+00A0) which looks &lt;strong&gt;exactly&lt;/strong&gt; the same as a space.&lt;/p&gt;

&lt;p&gt;When this unicode character occurred before a mention, Ruby 1.8 &lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; would no longer match the &lt;code&gt;\W&lt;/code&gt; portion of the regex and the user would never be notified. By the time the comment was in the database, the unicode was gone and the cause was entirely obscured.&lt;/p&gt;

&lt;h4 id="solution"&gt;Solution&lt;/h4&gt;

&lt;p&gt;As is often the case, having a reproducible fault made the solution easy. Simply normalising unicode before trying to parse the comments for mentions completely eliminated the issue. In this instance, Iconv did the trick, and the whole method ended up something like this:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_mentions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;normalized_comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Iconv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;conv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ASCII//TRANSLIT//IGNORE'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'UTF8'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalized_comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(?:^|\W)@(\w+)/&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;
  &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:conditions&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:username&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="ss"&gt;:select&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Phew.&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;Thankfully, in modern versions of Ruby, this regex matches unicode exactly as you’d expect it to. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Fixing Connection Errors After Upgrading Postgres</title>
    <link rel="alternate" href="http://daniel.fone.net.nz/blog/2014/12/01/fixing-connection-errors-after-upgrading-postgres/"/>
    <id>http://daniel.fone.net.nz/blog/2014/12/01/fixing-connection-errors-after-upgrading-postgres/</id>
    <published>2014-12-01T12:43:00+13:00</published>
    <updated>2014-12-01T13:21:32+13:00</updated>
    <author>
      <name>Daniel Fone</name>
    </author>
    <content type="html">&lt;p&gt;I recently upgraded postgres from 9.2 to 9.3 using &lt;code&gt;brew upgrade postgres&lt;/code&gt;. The process was smooth and &lt;code&gt;pg_upgrade&lt;/code&gt; is a very handy tool.&lt;/p&gt;

&lt;p&gt;However, trouble struck once I tried to run any specs that needed to connect to postgres. Even though postgres was &lt;em&gt;definitely&lt;/em&gt; running, suddenly I was getting:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;could not connect to server: No such file or directory (PG::ConnectionBad)
Is the server running locally and accepting
connections on Unix domain socket "/var/pgsql_socket/.s.PGSQL.5432"?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem was that the new version of postgres listens on /tmp/.s.PGSQL.5432 instead. I could’ve messed around with the config and made postgres use the domain socket it was previously, or told rails explictly how to connect, but both of those approaches seemed like work I shouldn’t have to do. At no point had I told rails to connect to postgres on that path, rails had assumed it, and now its assumptions were wrong.&lt;/p&gt;

&lt;p&gt;The fix is simple, if a little suprising. When you install the pg gem, it detects which version of postgres is installed and sets the domain socket path appropriately. The solution is as simple as reinstalling the gem.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ gem uninstall pg
$ cd my-rails-app/
$ bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hat tip to &lt;a href="http://tammersaleh.com/posts/installing-postgresql-for-rails-3-1-on-lion/"&gt;Tammer Selah&lt;/a&gt; and this &lt;a href="http://stackoverflow.com/questions/6770649/repairing-postgresql-after-upgrading-to-osx-10-7-lion#comment8687127_6772559"&gt;Stack Overflow comment&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Devise causing a CookieOverflow error</title>
    <link rel="alternate" href="http://daniel.fone.net.nz/blog/2014/11/28/actiondispatch-cookies-cookieoverflow-via-devise-s-user_return_to/"/>
    <id>http://daniel.fone.net.nz/blog/2014/11/28/actiondispatch-cookies-cookieoverflow-via-devise-s-user_return_to/</id>
    <published>2014-11-28T10:51:00+13:00</published>
    <updated>2014-11-28T22:03:00+13:00</updated>
    <author>
      <name>Daniel Fone</name>
    </author>
    <content type="html">&lt;p&gt;Today I came across an exception that was caused by a collision of two uncommon circumstances:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A large and complex form, submitted via GET (it was a search form with a &lt;em&gt;lot&lt;/em&gt; of parameters)&lt;/li&gt;
  &lt;li&gt;A Devise session time out&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="how-it-happens"&gt;How It Happens&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;A user who signed in some time ago has the form open. They submit the form which GETs a very long url from the server.&lt;/li&gt;
  &lt;li&gt;Devise attempts to authenticate the user and realises that their session has expired.&lt;/li&gt;
  &lt;li&gt;Devise attempts to redirect the user to the sign in form, but first it stores the url in the session as &lt;code&gt;user_return_to&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The url is too long to fit in the session and a ActionDispatch::Cookies::CookieOverflow exception is raised.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="reproducible-test-case"&gt;Reproducible Test Case&lt;/h3&gt;

&lt;p&gt;Fortunately, it’s very easy to replicate the problem in tests. Anytime an unauthenticated user requests a url approaching ActionDispatch::Cookies::MAX_COOKIE_SIZE, Devise will attempt to store the the url and cause the exception to be raised.&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# /spec/requests/large_request_spec.rb&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'spec_helper'&lt;/span&gt;

  &lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'A very large request'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :request&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'should not overflow cookies'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="s1"&gt;'x'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="no"&gt;ActionDispatch&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Cookies&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MAX_COOKIE_SIZE&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="s1"&gt;'/users/sign_in'&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This reliably produces&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1) A very large request should not overflow cookies
   Failure/Error: get '/', foo: 'bar' * 1000
   ActionDispatch::Cookies::CookieOverflow:
     ActionDispatch::Cookies::CookieOverflow
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="solutions"&gt;Solutions&lt;/h3&gt;

&lt;p&gt;There were a couple of approaches that I didn’t want to pursue.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Changing the form method to POST. This substantially alters the behaviour of the form, “breaking” the back and refresh functionality, and preventing users from easily sharing search results.&lt;/li&gt;
  &lt;li&gt;Abbreviating the parameter name. Because the forms are all generated by rails helpers, this would require overriding a lot of simple behaviour. The form is also dynamic and the number of GET parameters is not fixed. This means we can never ensure that the GET url will be small enough.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ultimately, I wanted to solve this at the Devise level. The problematic behaviour is defined in the &lt;a href="https://github.com/plataformatec/devise/blob/v3.4.1/lib/devise/controllers/store_location.rb"&gt;store_location module&lt;/a&gt;, which is included into Devise’s &lt;a href="https://github.com/plataformatec/devise/blob/a93edc72fd9f6cc5839dd74107b215a81c16dc37/lib/devise/failure_app.rb"&gt;failure app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wrote a simple initializer to monkey patch the method and prevent it storing excessively long urls in the session.&lt;/p&gt;

&lt;script src="https://gist.github.com/danielfone/c8ab593c326a8052651c.js"&gt;&lt;/script&gt;

&lt;p&gt;The downside to this approach is that the user loses their place in the form, but it is far better than an unhandled exception when submitting. I’ve submitted a &lt;a href="https://github.com/plataformatec/devise/pull/3347"&gt;pull request&lt;/a&gt; to the Devise project, but to be honest this is such an edge case that it may not warrant it. We’ll see what happens.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Upload Progress in Ruby with curb</title>
    <link rel="alternate" href="http://daniel.fone.net.nz/blog/2014/05/22/upload-progress-in-ruby-with-curb/"/>
    <id>http://daniel.fone.net.nz/blog/2014/05/22/upload-progress-in-ruby-with-curb/</id>
    <published>2014-05-22T00:17:00+12:00</published>
    <updated>2014-05-22T00:58:45+12:00</updated>
    <author>
      <name>Daniel Fone</name>
    </author>
    <content type="html">&lt;p&gt;A friend was telling me how difficult it was to get the progress of a file upload in ruby using the standard Net::HTTP library or any of the popular HTTP wrapper gems. He wanted to get simple details similar to curl.&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl --progress-bar --form --upload=@1mb.txt http://requestb.in/ztmawczt &amp;gt; /dev/null
######################################################                    75.5%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fortunately, there is the &lt;a href="https://github.com/taf2/curb"&gt;curb&lt;/a&gt; gem which provides ruby bindings around &lt;a href="http://curl.haxx.se/libcurl/"&gt;libcurl&lt;/a&gt;. Using this gem, we can use the &lt;code&gt;on_progress&lt;/code&gt; method to do something like this:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;curl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;on_progress&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;download_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;downloaded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upload_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uploaded&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;uploaded&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;upload_size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href="http://rubydoc.info/gems/curb/Curl/Easy#on_progress-instance_method"&gt;documentation&lt;/a&gt; is a little sparse, and there are two major caveats to watch out for:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You MUST return true from this block if you want the upload to continue&lt;/li&gt;
  &lt;li&gt;Any exceptions that occur in the block will be swallowed and reraised as an Curl::Err::AbortedByCallbackError. This makes development a little bit painful, but you use your own &lt;code&gt;begin ... rescue ... end&lt;/code&gt; inside the block to help debug if needed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ve published a full &lt;a href="https://github.com/danielfone/curb-upload-progress"&gt;working example on github&lt;/a&gt;.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Customising Scaffold Views in Ruby on Rails</title>
    <link rel="alternate" href="http://daniel.fone.net.nz/blog/2014/02/01/customising-scaffold-views-in-ruby-on-rails/"/>
    <id>http://daniel.fone.net.nz/blog/2014/02/01/customising-scaffold-views-in-ruby-on-rails/</id>
    <published>2014-02-01T00:00:00+13:00</published>
    <updated>2014-05-21T22:34:36+12:00</updated>
    <author>
      <name>Daniel Fone</name>
    </author>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;In Rails 3.0 and above, generators don’t just look in the source root for templates,
they also search for templates in other paths. And one of them is &lt;code&gt;lib/templates&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;— &lt;a href="http://guides.rubyonrails.org/generators.html#customizing-your-workflow-by-changing-generators-templates"&gt;RailsGuide on Generators&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This fact makes it very easy for us to change the views that are generated when we run &lt;code&gt;rails generate scaffold ...&lt;/code&gt;. Let’s say we want to change the scaffold’s form template so that it uses a select box for a &lt;code&gt;belongs_to&lt;/code&gt; relationship.&lt;/p&gt;

&lt;p&gt;&lt;img alt="select box" src="/blog/2014/02/01/customising-scaffold-views-in-ruby-on-rails/select-box.png" /&gt;&lt;/p&gt;

&lt;p&gt;Here are the steps we need to take:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Find the original template&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;These live in the &lt;code&gt;lib/rails/generators/erb/scaffold/templates&lt;/code&gt; folder of the railties gem. To find the path of the gem, we can run &lt;code&gt;bundle show railties&lt;/code&gt;. Alternatively we can run &lt;code&gt;bundle open railties&lt;/code&gt; and navigate to the &lt;code&gt;_form.html.erb&lt;/code&gt; file. Once we’ve found this, we’ll want to copy it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Copy it into our application&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;As quoted above, generators will search for templates in &lt;code&gt;lib/templates&lt;/code&gt;. For this template, we’ll need to copy it into &lt;code&gt;lib/templates/erb/scaffold/_form.erb.html&lt;/code&gt; within our application’s root.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Change the template&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;At this point, we can make whatever changes we like!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By way of illustration, here’s one way to use a select box for a belongs_to relationship.&lt;/p&gt;

&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;# lib/templates/erb/scaffold/_form.html.erb
&lt;/span&gt;&lt;span class="gh"&gt;@@ -23,7 +23,7 @@
&lt;/span&gt; &amp;lt;% else -%&amp;gt;
   &amp;lt;%- if attribute.reference? -%&amp;gt;
     &amp;lt;%%= f.label :&amp;lt;%= attribute.column_name %&amp;gt; %&amp;gt;&amp;lt;br&amp;gt;
&lt;span class="gd"&gt;-    &amp;lt;%%= f.&amp;lt;%= attribute.field_type %&amp;gt; :&amp;lt;%= attribute.column_name %&amp;gt; %&amp;gt;
&lt;/span&gt;&lt;span class="gi"&gt;+    &amp;lt;%%= f.collection_select :&amp;lt;%= attribute.column_name %&amp;gt;, &amp;lt;%= attribute.name.camelize %&amp;gt;.all, :id, :name, prompt: true  %&amp;gt;
&lt;/span&gt;   &amp;lt;%- else -%&amp;gt;
     &amp;lt;%%= f.label :&amp;lt;%= attribute.name %&amp;gt; %&amp;gt;&amp;lt;br&amp;gt;
     &amp;lt;%%= f.&amp;lt;%= attribute.field_type %&amp;gt; :&amp;lt;%= attribute.name %&amp;gt; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve uploaded an &lt;a href="https://github.com/danielfone/rails4-custom-scaffold-test"&gt;example app&lt;/a&gt; to github, where you can see the &lt;a href="https://github.com/danielfone/rails4-custom-scaffold-test/blob/master/lib/templates/erb/scaffold/_form.html.erb"&gt;customised template&lt;/a&gt; in full and also &lt;a href="https://github.com/danielfone/rails4-custom-scaffold-test/blob/master/app/views/smart_users/_form.html.erb"&gt;the view&lt;/a&gt; it generates.&lt;/p&gt;

&lt;p&gt;Now when we run &lt;code&gt;rails generate scaffold user name:string user_type:references&lt;/code&gt;, our form will use a helpful select box instead of an empty text field.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Edit: This question was originally prompted by &lt;a href="http://daniel.fone.net.nz/blog/2013/10/19/prototyping-web-applications-in-rails-4/#comment-1225579568"&gt;a comment&lt;/a&gt; on another post, referencing a &lt;a href="http://stackoverflow.com/questions/21486137/rails-scaffold-references-with-select-input-and-entity-label-with-generators/21496682"&gt;StackOverflow question&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Laziest possible solutions for Stripe's CTF</title>
    <link rel="alternate" href="http://daniel.fone.net.nz/blog/2014/01/31/laziest-possible-solutions-for-stripes-ctf/"/>
    <id>http://daniel.fone.net.nz/blog/2014/01/31/laziest-possible-solutions-for-stripes-ctf/</id>
    <published>2014-01-31T00:00:00+13:00</published>
    <updated>2014-05-20T13:55:02+12:00</updated>
    <author>
      <name>Daniel Fone</name>
    </author>
    <content type="html">&lt;p&gt;A good programmer is a lazy programmer right? Here’s my solutions to Stripe’s latest CTF.
I’m almost embarrassed how stupid some of them are, but at the end of the day, results matter.&lt;/p&gt;

&lt;h3 id="level-0"&gt;Level 0&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/danielfone/stripe-ctf-level0/commit/fef0cfcba371dc29d9f0fd1f7bc0e1c9e1161b38#diff-1"&gt;Converted&lt;/a&gt; &lt;code&gt;array&lt;/code&gt; to &lt;code&gt;set&lt;/code&gt; for fast lookups.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danielfone/stripe-ctf-level0"&gt;https://github.com/danielfone/stripe-ctf-level0&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="level-1"&gt;Level 1&lt;/h3&gt;

&lt;p&gt;Simply move the while loop into a single ruby process and use &lt;code&gt;Digest::SHA1&lt;/code&gt;. Slow, but fast enough to beat the level.
This is the only level I had to write proper code for.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danielfone/stripe-ctf-level1"&gt;https://github.com/danielfone/stripe-ctf-level1&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="level-2"&gt;Level 2&lt;/h3&gt;

&lt;p&gt;Exploit the fact that the test uses a fixed number of requests (and many more for “elephants” than “mice”), and &lt;a href="https://github.com/danielfone/stripe-ctf-level2/commit/7f1171a8400c39ac691c54fa0cddbc9ea4202edb#diff-1"&gt;limit each IP to 10 requests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danielfone/stripe-ctf-level2"&gt;https://github.com/danielfone/stripe-ctf-level2&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="level-3"&gt;Level 3&lt;/h3&gt;

&lt;p&gt;Friends don’t let friends use scala.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set up a basic sinatra server to implement the API&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/danielfone/stripe-ctf-level3/blob/master/search.rb#L24"&gt;Shell out to grep&lt;/a&gt; to do actual searching. Single node, no index. O_o&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/danielfone/stripe-ctf-level3"&gt;https://github.com/danielfone/stripe-ctf-level3&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="level-4"&gt;Level 4&lt;/h3&gt;

&lt;p&gt;I was fortunate enough to reach this level early, and pass it before Stripe improved octopus. As such I passed it with &lt;a href="https://github.com/danielfone/stripe-ctf-level4/commit/10be54c6915d1492791bb147a0c9daeb3c27003d"&gt;my first attempt&lt;/a&gt;, simply by removing the failover (node0 becomes Single Point of Failure) and forwarding requests from the secondaries to the primary.&lt;/p&gt;

&lt;p&gt;The remaining commits are my futile attempts to pass this level after the SPOF check was added to the tests. Looking at the code for successful solutions, I can see I was on the right path but needed to invest more time into making my command forwarding more robust.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danielfone/stripe-ctf-level4"&gt;https://github.com/danielfone/stripe-ctf-level4&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
